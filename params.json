{
  "name": "Mitm-perk-quiz",
  "tagline": "hacking Perk Pop Quiz (Android/iOS game) by mitm",
  "body": "mitm-perk-quiz\r\n==============\r\n\r\n>   **Perk Pop Quiz**\r\n\r\n>   Well its one of those apps (available for Android/ iOS) which award you with\r\n>   special bonuses like Gift Cards, points redeeming to Cash!, or even buy few\r\n>   stuff with the points you have collected by playing quiz, answering to the\r\n>   questions on any topic you like. As simple as that.\r\n\r\n \r\nSo? What’s mitm-perk-quiz?\r\n--------------------------\r\n\r\nWell straight and simple, here we are going to learn, how to be a serious smart\r\npant, a great genius, a walking Wikipedia, a human version of IBM’s Watson, who\r\ncould just answer any any general question, like how Google would come\r\nup with the results!. So, we learn here now, and then, answer the questions that\r\nare asked to us in this [Perk Pop Quiz](https://play.google.com/store/apps/details?id=com.jutera.perkpopquiz.aphone&hl=en) app without having\r\never gone wrong, and finally to earn points (the cash redeeming you know).\r\n\r\nOkay! that’s enough now.. I was just kidding :skull: I ain’t got any super powers to\r\nhelp you with or something I can make you cast a spell to be that “Intelligent”\r\n:wink:. Yes but that’s true, that you would answer any question asked to you\r\n**inside the app**, so in end you can collect the points smoothly without having\r\ndo no mistakes.\r\n\r\nAhem!, pretty straight to say, **just get to know the right answer, and select\r\nit from the options given to you for that question of that particular session.**\r\n\r\n**So how are we going to do that?**. Exactly, that is what we are going to know\r\nhow, check it out below..\r\n\r\n \r\nScenario...\r\n-----------\r\n\r\nOkay!, I ain’t gonna narrate any story story here :thought_balloon:. Its just how it all\r\nstarted for this. I were doing some web debugging (sniffing [HTTP requests](http://rve.org.uk/dumprequest)) on the phone from my PC (performing a *mitm, [Man In The Middle attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)*, not with any “attack” intentions really), on few of\r\nthe android apps I installed lately, just to check how and **why** often do they\r\ncommunicate with network in background (of course I am damn concerned with my\r\nphones soon battery drain issue too :disappointed: ..)\r\n\r\nIt was time for this *Perk Pop Quiz* app. Gosh!, it had too many *HTTP requests*\r\nrunning in background. I played a solo quiz on a random quiz category, and\r\nnoticed, that in one of the [HTTP GET](http://www.w3schools.com/TAGS/ref_httpmethods.asp) requests the app\r\nmade (prior to the moment I started the game), it contained all the Questions,\r\nOptions, **Answers,** in [JSON](http://www.w3schools.com/js/js_json_intro.asp) format. So now I got a bit mouth watered.\r\nI had almost thought of getting a power bank after having it known.\r\n\r\nBut damn!, there was a critical issue to have them utilized, the answers, were,\r\nENCRYPTED!. And those can only be decrypted by the app installed by the user.\r\nSpent 4 days trying to analyze how is the app decrypting the answers.\r\n\r\nReverse Engineered the *apk* file using [Apktool](https://ibotpeaches.github.io/Apktool/).\r\nDeep shoveled the source code, apprehended the\r\n[Activity](https://developer.android.com/reference/android/app/Activity.html) where the quiz is performed, and finally\r\nfound the exact piece of code which decrypts the answers. And after that, I got\r\na complete idea, and then I could wind up the stuff like below, when the session\r\nof quiz is just about to begin (after the ads finish displaying, and the game\r\nticks to start off) these things happen..\r\n\r\n \r\n### Server Responsibility:\r\n\r\n> Host = api-tv.perk.com\r\n\r\n> URL = /v5/ppq/questions.json\r\n\r\n\r\n1.  *Correct* answer is encrypted (actually hashed) using [SHA-1](https://en.wikipedia.org/wiki/SHA-1)\r\n    algorithm.\r\n\r\n2.  The **Correct** answer of each question is **digested (as hexadecimal)** by\r\n    adding the [access\\_token](https://en.wikipedia.org/wiki/Access_token) (*authentication token*\r\n    otherwise) that was provided for the user with the right option **id** of\r\n    that question.\r\n\r\n3.  Server sends (on a user’s single HTTP GET request) the *questions, options*\r\n    in normal text, with *correct* answer encrypted from the above process\r\n    mentioned in step 2.\r\n\r\n>   A raw idea, is something like,\r\n\r\n>   **curl --get\r\n>   https://api-tv.perk.com/v5/ppq/questions.json?access\\_token={***a 40\r\n>   character value***}&category\\_id={** *type of quiz represented numerically*\r\n>   }&limit= { *number of questions* }\r\n\r\n \r\n### Client (User/App) Responsibility:\r\n\r\n>   Example, the Response received now is,\r\n>   `{\"status\":\"success\",\"message\":null,\"data\":{\"batch_id\":\"df9ec8c7c5599bdab553c24b1a2071bbcbbd738b8227549e20d9f40e3649ff20\",\"questions\":[`\r\n\r\n>   `{\"id\":\"226702\",\"question_text\":\"What is a common name for the Aurora\r\n>   Borealis?\",\"is_boolean\":false,\"img\":null,\"answers\":[{\"id\":\"905977\",\"answer_text\":\"Gegenschein\"},{\"id\":\"905978\",\"answer_text\":\"Plage\"},{\"id\":\"905975\",\"answer_text\":\"Northern\r\n>   Lights\"},{\"id\":\"905976\",\"answer_text\":\"Zodiacal\r\n>   light\"}],`**\"correct\"**`:`*\"62a541f079038ed11c83b4615c926828a42d67a3\"*`},`\r\n\r\n>   `{\"id\":\"226700\",\"question_text\":\"What is usually seen near the poles in the\r\n>   night sky that can be red, yellow or\r\n>   green?\",\"is_boolean\":false,\"img\":null,\"answers\":[{\"id\":\"905969\",\"answer_text\":\"Gegenschein\"},{\"id\":\"905968\",\"answer_text\":\"Zodiacal\r\n>   light\"},{\"id\":\"905967\",\"answer_text\":\"Aurora\"},{\"id\":\"905970\",\"answer_text\":\"Plage\"}],`**\"correct\"**`:`*\"a1359ec9c77390088796895854a7d2d5b803eedc\"*`},`\r\n\r\n>   `{\"id\":\"226659\",\"question_text\":\"When the Earth is directly between the Sun\r\n>   and the Moon, it is called a\\/an _________\r\n>   eclipse.\",\"is_boolean\":false,\"img\":null,\"answers\":[{\"id\":\"905806\",\"answer_text\":\"Transit\"},{\"id\":\"905803\",\"answer_text\":\"Lunar\"},{\"id\":\"905804\",\"answer_text\":\"Solar\"},{\"id\":\"905805\",\"answer_text\":\"Inferior\r\n>   conjunction\"}],`**\"correct\"**`:`*\"0d5f38b422b2650b74ab925c86eb7749b6bc600f\"*`},`\r\n\r\n>   `{\"id\":\"226751\",\"question_text\":\"The mantle makes up about ____% of Earth's\r\n>   volume.\",\"is_boolean\":false,\"img\":null,\"answers\":[{\"id\":\"906171\",\"answer_text\":\"84\"},{\"id\":\"906172\",\"answer_text\":\"97\"},{\"id\":\"906173\",\"answer_text\":\"12\"},{\"id\":\"906174\",\"answer_text\":\"20\"}],`**\"correct\"**`:`*\"cb5a1e645f1ab427ac4b1654db91d0d37f5d0098\"*`},`\r\n\r\n>   `{\"id\":\"226604\",\"question_text\":\"What mineral has perfect cleavage in six\r\n>   directions?\",\"is_boolean\":false,\"img\":null,\"answers\":[{\"id\":\"905586\",\"answer_text\":\"Fluorite\"},{\"id\":\"905585\",\"answer_text\":\"Sodalite\"},{\"id\":\"905583\",\"answer_text\":\"Sphalerite\"},{\"id\":\"905584\",\"answer_text\":\"Diamond\"}],`**\"correct\"**`:`*\"44829a277381a356295ebllb1c1ea4d827e31d1a\"*`},`\r\n\r\n>   `{\"id\":\"226580\",\"question_text\":\"What would you call the solid material that\r\n>   is carried within the\r\n>   stream?\",\"is_boolean\":false,\"img\":null,\"answers\":[{\"id\":\"905487\",\"answer_text\":\"Suspended\r\n>   load\"},{\"id\":\"905490\",\"answer_text\":\"Bed\r\n>   load\"},{\"id\":\"905488\",\"answer_text\":\"Dissolved\r\n>   load\"},{\"id\":\"905489\",\"answer_text\":\"Floating\r\n>   load\"}],`**\"correct\"**`:`*\"ece190cfc99bf5800a5a8d9b93999dca89dd828f\"*`}],`\r\n\r\n>   `\"current_streak\":0,\"longest_streak\":1,\"answer_responses\":{\"correct\":[\"You're\r\n>   on a roll!\",\"Smart cookie!\",\"NAILED IT!\",\"Aww\r\n>   YEAH!\",\":D\",\"BOOM!\",\"BINGO!!!\",\"You're on FIRE!\",\"BINGO!!\",\"Correct!\",\"Good\r\n>   one!\",\"YES!\"],\"incorrect\":[\"Try again!\",\"Try another\r\n>   one.\",\":(\",\"Dang!\",\"Nope :(\",\"Ouch\"]}}}`\r\n\r\n>   You can notice the correct answer for every question is encrypted.\r\n\r\n1.  Receive the JSON data from the server by providing the **access\\_token** to\r\n    it, that was registered and stored for that particular user.\r\n\r\n2.  Parse the data and display it graphically in structured way to user.\r\n\r\n3.  When the user selects the option, verify if it is correct in this way,\r\n\r\n    1.  Add (concatenate) the the **access\\_token** and the option’s **id**\r\n        (JSON attribute) of that question.\r\n\r\n    2.  Calculate the **SHA-1** of the sum from above.\r\n\r\n    3.  Check each of the resultant hash of the options **id’s** are equal to\r\n        the **Correct** attribute of the question. The one which equals is the\r\n        **right option!**\r\n\r\n>   A snippet for it goes like,\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ python\r\ndef verifyRightAnswer(answer_id, correct_sha, authentication_token):\r\n        h = HashUtil.sha1Hash\r\n        right_answer_id = str(answer_id)\r\n        auth_token = str(authentication_token)\r\n        auth_correction = auth_token + right_answer_id\r\n        result = h(auth_correction)\r\n        #print(result)\r\n        return (result == correct_sha)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nWhoaaa!! All this happens is in matter of a second, and **you have only the next\r\nvery 5 seconds** already to answer up for the next question, by then you’ve got\r\nto,\r\n\r\n1.  Intercept the the HTTP requests between your phone (client) and the perk\r\n    servers.\r\n\r\n2.  Process the JSON data and decrypt the answers and view them.\r\n\r\n3.  Search for question and its answer that is randomly asked from the list of\r\n    questions the server sends.\r\n\r\nHuff!! **hell go with the perk!** You must be saying this to me :trollface:\r\n\r\nDo you think we should give up here?.. Nope I don’t think so :angel:, as long as we\r\ncan automate few things.\r\n\r\nBut before we proceed further, I highly recommend you have the prerequisites\r\nthat you need in order to achieve this hack successfully.\r\n\r\n\r\nThings Required\r\n---------------\r\n-   Sound knowledge of programming.\r\n\r\n-   Windows (7\\~10) running **PC**\r\n\r\n    >   To perform the hack on\r\n\r\n-   **Android** Phone (of any API version, supporting Proxy on Wi-Fi)\r\n\r\n    >   Play the quiz game on to\r\n\r\n-   Telerik **Fiddler** Web Debugger\r\n    [(Download)](https://www.telerik.com/download/fiddler)\r\n\r\n    >   To sniff the requests between phone and perk servers, and activate the\r\n    >   python script\r\n\r\n-   Fiddler **SyntaxView** addon\r\n    [(Download)](http://fiddler2.com/r/?SYNTAXVIEWINSTALL)\r\n\r\n    >   This is required to customize the *FiddlerScript Rules file* easily.\r\n\r\n-   **Python** 3.5/Latest release [(Download)](https://www.python.org/downloads/)\r\n\r\n    >   Compile and run the python script that can parse the response, decrypt\r\n    >   the answers, and display the results in organized way, that was sniffed\r\n    >   by Fiddler.\r\n\r\n-   **Per Pop Quiz** [(Install)](https://play.google.com/store/apps/details?id=com.jutera.perkpopquiz.aphone&hl=en)\r\n\r\n    >   Bah! app of course, Watson you :ghost:\r\n\r\n-   PC and Phone connected to **same network**.\r\n\r\n    >   PC acts as a proxy to the phone, so that the network traffic over the\r\n    >   phone can be captured as it passes through, using *Fiddler.*\r\n\r\n-   And Authentication Token (**access\\_token**) (no worries, we’ll find it once\r\n    things are set up)\r\n\r\n    >   This is required to decrypt the answers, the **most important**\r\n    >   component for this whole circus to happen\r\n\r\n \r\nSo what are we waiting for?, lets get started right away!\r\n\r\n\r\nSTEP 1 (setting up the things...)\r\n---------------------------------\r\n\r\n>   Make sure your PC and your android phone is connected to the same network.\r\n>   That would simply mean, connecting to a same Wi-Fi.\r\n\r\n### Setting up the fiddler, so that we can intercept the requests of the Perk Pop Quiz on your phone.\r\n\r\n-   Install the Fiddler, run it, go to `Tools ` in the Menu bar, click on\r\n    `Telerik Fiddler Options...`\r\n\r\n    -   Select `Connections` Tab,\r\n\r\n        -   Set the value of `Fiddler listens on port:`to **8888**\r\n\r\n        -   Check the `Monitor all connections` option\r\n\r\n        -   Check the `Allow remote computers to connect` option\r\n\r\n        -   Check the `Reuse client connections` option\r\n\r\n        -   Check the `Reuse server connections` option\r\n\r\n    -   Select `HTTPS ` Tab,\r\n\r\n        -   Check the `Capture HTTPS connects` option\r\n\r\n        -   Check the `Decrypt HTTPS traffic` option\r\n\r\n-   Restart the Fiddler.\r\n\r\n-   Now navigate to `Control Panel > Network and Internet > Network and Sharing\r\n    Center > Change adapter settings.` Right click on the Wi-Fi adapter your\r\n    internet works on, select `Status,`click on `Details...`, and note down the\r\n    `Autoconfiguration IPv4 address.`\r\n\r\n-   In your android phone, Go to Wi-Fi settings, long press the network you are\r\n    connected to.\r\n\r\n    -   Click on `Modify network config,` check on `Show advanced\r\n        options,`you’ll be provided with more options to configure.\r\n\r\n    -   Select `Manual` for under *Proxy* spinner.\r\n\r\n    -   Now type the `Autoconfiguration IPv4 address` of the PC you noted down,\r\n        in the `Proxy hostname`textview, and there below, enter the number\r\n        `8888` in the `Proxy port` textview.\r\n\r\n-   Go to your phones default web browser, and type `http://ipv4.fiddler:8888/`\r\n    in the search bar. Download the certificate and install it. This trusted\r\n    certificate is required to help the network of your android phone to be\r\n    monitored by fiddler.\r\n\r\n>   I haven’t tried up with iPhone version. Well things should remain same as\r\n>   long as iOS permits to install the certificates, and run proxy over Wi-Fi.\r\n\r\n-   Run the fiddler now.\r\n\r\nIf everything was followed up correctly so far, you should see all the web\r\nsessions (the requests and their responses) captured inside fiddler, made by all\r\nyour installed android apps (and of your systems too).\r\n\r\n\r\nSTEP 2 (getting your Perk identity)\r\n-----------------------------------\r\n\r\n### Finding the authentication token (**access\\_token**)\r\n\r\nAs the requests are made by the phone, you can see them getting added up in the\r\nsession list of the Fiddler one after the other. Its time now, we capture that\r\nrequest which holds the *access\\_token* that designates our identity in the app.\r\n\r\n-   Open the *Perk Pop Quiz* app in your phone,. You may notice continuous\r\n    requests that are made by the app are being updated on Fiddler in your PC.\r\n    For now, you don’t have to investigate anything. Let them get captured.\r\n\r\n-   Play any quiz of your choice. Well if you did any mistakes in this quiz, it\r\n    might be the last time ha ha :broken_heart:. Well after you finish playing, close the\r\n    app.\r\n\r\n-   Head back to Fiddler, press `Ctrl+F` or you can go to `Edit > Find\r\n    Sessions...` from the menu strip.\r\n\r\n-   Type `https://api-tv.perk.com/v6/ppq/tags?access_token=`\r\n\r\n    -   You can see the session being highlighted. That’s it, there goes your\r\n        access\\_token !!. Just look at your left in `Inpector` section, under\r\n        `Header` tab.\r\n\r\n    You will have it in this way,\r\n\r\n    >   GET\r\n    >   /v6/ppq/tags?**access\\_token=c6ffaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXfe4d1**\r\n    >   HTTP/1.1\r\n\r\n    >   *(the original characters are replaced with...XXXXX... in above to hide\r\n    >   my access\\_token, no worries)*\r\n\r\n-   Note down the access\\_token (that 40 character value you just found). I\r\n    believe this might vary if you reinstall the app, or if you installed the\r\n    app in other phone, with your identity.\r\n\r\nThe above two steps are not required to perform repeatedly, on each hack. As\r\nlong as you are not performing it on different Wi-Fi network.\r\n\r\n\r\nSTEP 3 (sharpening up the tools)\r\n--------------------------------\r\n\r\n>   Make sure you’ve installed SyntaxView addon for fiddler. Not compulsory\r\n>   though.\r\n\r\nThis was the most difficult part for me to step up. But thankfully succeeded in\r\nmaking it out. I wouldn’t even write this all if I failed. Everything was done,\r\nI got even the script written to decrypt, and display the results. So when I\r\ntried playing the quiz, with the things I had now, the moment I begun with the\r\nquiz, captured the response (one which server sends from the URL\r\n*/v5/ppq/questions.json*), and immediately fed the response data to the script\r\nfrom the notepad, and got the results too. But guess what? I could just still\r\nanswer one bloody question correctly :D.\r\n\r\nBecause it took me 13 seconds to do this after the quiz started. And another 5-6\r\nseconds to search for question and its answer that is randomly asked from the\r\nlist server sends (which I was talking about initially). And of all, the whole\r\nquiz session is just of 30-45 seconds hardly. I was doom struck with this. Can’t\r\njust have a partner to help me find and read out the answers. It sounds so\r\nugly-hack! Yew :X.\r\n\r\nThen I taught of integrating any of open source available sniffers like\r\n[Pyshark](https://pypi.python.org/pypi/pyshark/0.1) or [Scapy](http://www.secdev.org/projects/scapy/) within my script. So\r\nthat the things I did by feeding the response data to script manually, should\r\nnow be done automatically in background, by programming in such a way to sniff\r\njust on the host *api-tv.perk.com*, and any request made to this host matches to\r\nthe request which we need, its response should be fed to the scripts main module\r\nwhich process’s and display the results. Which would remove that 13-15 seconds\r\nlag to answer.\r\n\r\nGoogled a lot to get it done. But, Windows didn’t let me to integrate it in some\r\nor the other way. The dependencies, different build tools required, the sniffers\r\nfailed to compile, version mismatch issues with the dependencies, huff!, I\r\nreached the ends but felt to just give up. It was like all the time digging in,\r\nwent in misery so far.\r\n\r\nBut a few days later, I accidentally came on this, `Customize Rules..`option\r\nunder `Rules` of the menu, in Fiddler. Damn good it was to know there’s such\r\noption too. Got hands little dirty in it, and Tada!, found the solution. The\r\nsteps to follow are below..\r\n\r\n### Make the script to self trigger, the moment when quiz starts\r\n\r\n-   Create a text file (with .json extension) in your preferred directory (not under *C:\\\\*\\* ), for\r\n    instance, in my case *“H:\\\\\\#alshell\\\\perk\\_data.json”.*\r\n\r\n-   Click on `Rules` option in the Menu, Select `Customize Rules...` under it.\r\n\r\n-   You can see the *FiddlerScript Rules file* opened in Fiddler Script Editor.\r\n\r\n-   Place the below namespace imports on top of this Rules file\r\n    ```\r\n    import System;\r\n    import System.Diagnostics;\r\n    import System.IO;\r\n    ```\r\n    \r\n-   Look out for the function, `static function OnDone(oSession: Session),`which\r\n    is actually commented by default.\r\n\r\n-   Uncomment that function, and place the below code inside it,.\r\n    *(Make sure to do changes for `mitmScript`, and for other file locations properly used below)*\r\n    \r\n```c#\r\n    if (oSession.fullUrl.Contains(\"https://api-tv.perk.com/v5/ppq/questions.json?\") && oSession.responseCode == 200)\r\n    {\r\n      //Save the complete response in a file that you created\r\n      var filePerk = \"H:\\\\#alshell\\\\perk_data.json\";\r\n      System.IO.File.WriteAllText(filePerk, oSession.GetResponseBodyAsString());\r\n      \r\n      //This is the location of the script which processes the response.\r\n      //Change it to your version of location.\r\n      //Notice and place the Backslash Constants correctly.\r\n      var mitmScript: String = \"\\\"H:\\\\#projects\\\\Python Scripts\\\\mitm-perk-quiz.py\\\"\";\r\n      \r\n      //Parameter to send for the python script\r\n      //This is different from the filePerk object above though,\r\n      //just the Backslash Constants are included well\r\n      //for the sake of correct parameter to be passed for the script\r\n      var jf: String = \"\\\"H:\\\\#alshell\\\\perk_data.json\\\"\";\r\n      \r\n      //The location of the python interpreter must be present\r\n      //in the Environment Variables of your system.\r\n      //Otherwise the script wont be able to compile. The latest python releases have\r\n      //the PATH of python automatically set during the installation.\r\n      var myProcessStartInfo: ProcessStartInfo = new ProcessStartInfo(\"python\");\r\n      \r\n      //The script returns the output, configure the process to receive it through Standard Output\r\n      myProcessStartInfo.UseShellExecute = false;\r\n      myProcessStartInfo.RedirectStandardOutput = true;\r\n      \r\n      //Set the arguments to the script\r\n      myProcessStartInfo.Arguments = mitmScript + \" --jsonfile \" + jf;\r\n      \r\n      var myProcess: Process = new Process();\r\n      myProcess.StartInfo = myProcessStartInfo; \r\n      \r\n      //Start the execution of script\r\n      myProcess.Start();\r\n      \r\n      //Read the output\r\n      var myStreamReader: StreamReader = myProcess.StandardOutput; \r\n      var myResults = myStreamReader.ReadToEnd();\r\n      \r\n      //Wait from the script to exit and then quit the process executing it.\r\n      myProcess.WaitForExit(); \r\n      myProcess.Close();\r\n      \r\n      //Display the results\r\n      MessageBox.Show(myResults);\r\n      \r\n    }\r\n```\r\n \r\n\r\nThat is it! Done. You are just a step away now.\r\n\r\n \r\nFINAL STEP\r\n----------\r\n\r\n### Set the access\\_token in the script.\r\n\r\n-   Open the **mitm-perk-quiz.py**\r\n\r\n-   Replace the value of class attribute `def_auth_token` with the\r\n    *access\\_token* you noted down in **STEP 2**\r\n    - Example, from `def_auth_token = None` to `def_auth_token = \"c6ffaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXfe4d1\"`\r\n\r\n-   Cheers!. You are about to be that smart pant.\r\n\r\n\r\nUltimately...\r\n-------------\r\n\r\n-   Make yourself comfortable.\r\n\r\n-   Get ready.\r\n\r\n-   Open the Perk Pop Quiz in your phone.\r\n\r\n-   Select **any** quiz category to play.\r\n\r\n-   Watch the screen of your PC, serving you with answers, the moment quiz\r\n    begins.\r\n\r\n![Results](https://github.com/alshell7/mitm-perk-quiz/blob/master/Result.PNG)\r\n\r\n-   __Seamlessly tap the answers!.__\r\n\r\n\r\nHope you felt cozy with the steps. I’d be grateful if I were too let know\r\nwith different approach than this.\r\nHave a nice perk time :boom:\r\n\r\n\r\n## License\r\n\r\nThe content of this project itself is licensed under the [Creative Commons Attribution 3.0 license](http://creativecommons.org/licenses/by/3.0/us/deed.en_US), and the underlying source code used to format and display that content is licensed under the [MIT license](http://opensource.org/licenses/mit-license.php).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}